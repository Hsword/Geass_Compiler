Synbl:
name	typ	cat	addr	pid           //addr 列是符号表新加的 -1表示标识符是函数明 非-1表示对应函数表下标
fun1	1	3	0	-1
x	1	2	0	0
fun2	1	3	1	-1
x	1	2	0	1
y	1	2	4	1
main	1	3	2	-1
a	1	2	0	2
b	4	2	4	2
c	1	2	84	2
d	1	2	88	2
y	1	1	0	2
i	1	2	92	2
Middle Code List:
FUN_S	fun1         //FUN_S 表示函数开始 Node 多加了一个类型 ein=5 Node.Name是函数名
=	1	 	[0]
+	[0]	2	[4]
RETAX	[4]           //RETAX表示把后面的存储器的值送给AX  即MOV [4],AX
RET
FUN_E	fun1       //FUN_E 表示函数结束
FUN_S	fun2
=	3	 	[0]
=	5	 	[4]
*	[0]	[4]	[8]
SSP	20              //这句表示  PUSH SP   然后 ADD SP,20
CALL	fun1
SPP                     //这句表示  POP SP
RETT	[12]            //RETAX表示把AX值送给后面的存储器  即MOV AX,[12]
+	[8]	[12]	[16]
RETAX	[16]
RET
FUN_E	fun2
FUN_S	main
=	1	 	[88]
*	0	4	[96]
+	4	[96]	[100]
*	0	4	[104]
+	4	[104]	[108]
*	1	4	[112]
+	4	[112]	[116]
+		[[116]]	[120]
=	[120]	 	[[100]]
+	1	2	[124]
SSP	208
CALL	fun2
SPP
RETT	[128]
*	[124]	[128]	[132]
=	[132]	 	[92]
|	2	3	[136]
=	[136]	 	[92]
*	[88]	3	[140]
/	[88]	2	[144]
+	[140]	[144]	[148]
=	[148]	 	[84]
=	1	 	[92]
FOR
LE	[92]	20	[152]
FOR_C	[152]
FOR_D
+	[92]	1	[156]
=	[156]	 	[92]
FOR_J
=	2	 	[88]
<	[92]	10	[160]
THEN	[160]
*	[92]	4	[164]
+	4	[164]	[168]
+	[92]	1	[172]
*	[172]	4	[176]
+	4	[176]	[180]
+		2	[184]
=	[184]	 	[[168]]
ELSE
*	[92]	4	[188]
+	4	[188]	[192]
-	[92]	1	[196]
*	[196]	4	[200]
+	4	[200]	[204]
=		 	[[192]]
IFEND
FOR_E
FUN_E	main
