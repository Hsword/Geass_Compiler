<constant-expression> ::= <conditional-expression>

<conditional-expression> ::=<logical-or-expression> { ? <expression> : <conditional-expression> }*

<logical-or-expression> ::= <logical-and-expression> { || <logical-and-expression> }*

<logical-and-expression> ::= <inclusive-or-expression> { && <inclusive-or-expression> }*

<inclusive-or-expression> ::= <exclusive-or-expression> { | <exclusive-or-expression> }*

<exclusive-or-expression> ::= <and-expression> { ^ <and-expression> }*

<and-expression> ::= <equality-expression>{ & <equality-expression> }*

<equality-expression> ::= <relational-expression>{ w0 <relational-expression> }*
            w0 ::=  == | !=

<relational-expression> ::= <additive-expression> { w1 <additive-expression> }*
            w1 ::=  > | < | <= | >=

<additive-expression> ::= <multiplicative-expression>{ w2 <multiplicative-expression> }*
            w2 ::= + | -

<multiplicative-expression> ::= <unary-expression> { w3 <unary-expression> }*
            w3 ::= * | / | %

<unary-expression> ::= <unary-operator> <unary-expression>
                       | <constant>
                       | ( <constant-expression> )
                       | <primary-expression>

<primary-expression> ::= <identifier> { [ <constant-expression> ] }*

<constant> ::= <integer-constant>
             | <real-constant>

<expression> ::= <assignment-expression> { , <assignment-expression> }*

<assignment-expression> ::= <primary-expression> <assignment-operator> <constant-expression>

<assignment-operator> ::= =

<unary-operator> ::= - | ~ | !

<type-name> ::= { const }? <type-specifier>

<type-specifier> ::= char
                   | int
                   | real

<declarator>  ::= <identifier>  { [ {<constant-expression>}? ] }*
                | ( <declarator> )

<declaration> ::=  <type-name> <init-declarator> { <init-declarator> }*

<init-declarator> ::= <declarator>
                    | <declarator> = <initializer>

<initializer> ::= <constant-expression>
                | { <initializer-list> }
                | { <initializer-list> , }

<initializer-list> ::= <initializer>
                     | <initializer> , <initializer-list>

/**********************************************************/

<compound-statement> ::= { {<declaration>}* {<statement>}* }

<statement> ::=<expression-statement>
              | <compound-statement>
              | <selection-statement>
              | <iteration-statement>
              | return {<constant-expression>}? ;

<expression-statement> ::= {<expression>}? ;

<selection-statement> ::= if ( <constant-expression> ) <statement>
                        | if ( <constant-expression> ) <statement> else <statement>

<iteration-statement> ::= while ( <constant-expression> ) <statement>
               | for ( {<expression>}? ; {<constant-expression>}? ; {<expression>}? ) <statement>

<jump-statement> ::= continue ;
                   | break ;
                   | <statement>
